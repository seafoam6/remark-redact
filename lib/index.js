"use strict";

function plugin() {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      _ref$beginMarker = _ref.beginMarker,
      beginMarker = _ref$beginMarker === undefined ? '/~' : _ref$beginMarker,
      _ref$endMarker = _ref.endMarker,
      endMarker = _ref$endMarker === undefined ? '~/' : _ref$endMarker,
      _ref$replacer = _ref.replacer,
      replacer = _ref$replacer === undefined ? 'â–ˆ' : _ref$replacer;

  function locator(value, fromIndex) {
    return value.indexOf(beginMarker, fromIndex);
  }

  function inlineTokenizer(eat, value, silent) {
    var keepBegin = value.indexOf(beginMarker);
    var keepEnd = value.indexOf(endMarker);
    if (keepBegin !== 0 || keepEnd === -1) return;
    /* istanbul ignore if - never used (yet) */

    if (silent) return true;
    var toBlackout = value.substring(beginMarker.length, keepEnd);
    var blackedOut = toBlackout.replace(/[0-9a-zA-Z]/g, replacer);
    return eat(beginMarker + toBlackout + endMarker)({
      type: 'redacted',
      value: blackedOut,
      data: {
        blackedOut: blackedOut
      }
    });
  }

  inlineTokenizer.locator = locator;
  var Parser = this.Parser; // Inject inlineTokenizer

  var inlineTokenizers = Parser.prototype.inlineTokenizers;
  var inlineMethods = Parser.prototype.inlineMethods;
  inlineTokenizers.redacted = inlineTokenizer;
  inlineMethods.splice(inlineMethods.indexOf('text'), 0, 'redacted');
  var Compiler = this.Compiler;

  if (Compiler) {
    var visitors = Compiler.prototype.visitors;
    if (!visitors) return;

    visitors.redacted = function (node) {
      return node.data.blackedOut;
    };
  }
}

module.exports = plugin;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9pbmRleC5qcyJdLCJuYW1lcyI6WyJwbHVnaW4iLCJiZWdpbk1hcmtlciIsImVuZE1hcmtlciIsInJlcGxhY2VyIiwibG9jYXRvciIsInZhbHVlIiwiZnJvbUluZGV4IiwiaW5kZXhPZiIsImlubGluZVRva2VuaXplciIsImVhdCIsInNpbGVudCIsImtlZXBCZWdpbiIsImtlZXBFbmQiLCJ0b0JsYWNrb3V0Iiwic3Vic3RyaW5nIiwibGVuZ3RoIiwiYmxhY2tlZE91dCIsInJlcGxhY2UiLCJ0eXBlIiwiZGF0YSIsIlBhcnNlciIsImlubGluZVRva2VuaXplcnMiLCJwcm90b3R5cGUiLCJpbmxpbmVNZXRob2RzIiwicmVkYWN0ZWQiLCJzcGxpY2UiLCJDb21waWxlciIsInZpc2l0b3JzIiwibm9kZSIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiI7O0FBQUEsU0FBU0EsTUFBVCxHQUE4RTtBQUFBLGlGQUFKLEVBQUk7QUFBQSw4QkFBNURDLFdBQTREO0FBQUEsTUFBNURBLFdBQTRELG9DQUE5QyxJQUE4QztBQUFBLDRCQUF4Q0MsU0FBd0M7QUFBQSxNQUF4Q0EsU0FBd0Msa0NBQTVCLElBQTRCO0FBQUEsMkJBQXRCQyxRQUFzQjtBQUFBLE1BQXRCQSxRQUFzQixpQ0FBWCxHQUFXOztBQUM1RSxXQUFTQyxPQUFULENBQWtCQyxLQUFsQixFQUF5QkMsU0FBekIsRUFBb0M7QUFDbEMsV0FBT0QsS0FBSyxDQUFDRSxPQUFOLENBQWNOLFdBQWQsRUFBMkJLLFNBQTNCLENBQVA7QUFDRDs7QUFFRCxXQUFTRSxlQUFULENBQTBCQyxHQUExQixFQUErQkosS0FBL0IsRUFBc0NLLE1BQXRDLEVBQThDO0FBQzVDLFFBQU1DLFNBQVMsR0FBR04sS0FBSyxDQUFDRSxPQUFOLENBQWNOLFdBQWQsQ0FBbEI7QUFDQSxRQUFNVyxPQUFPLEdBQUdQLEtBQUssQ0FBQ0UsT0FBTixDQUFjTCxTQUFkLENBQWhCO0FBQ0EsUUFBSVMsU0FBUyxLQUFLLENBQWQsSUFBbUJDLE9BQU8sS0FBSyxDQUFDLENBQXBDLEVBQXVDO0FBRXZDOztBQUNBLFFBQUlGLE1BQUosRUFBWSxPQUFPLElBQVA7QUFFWixRQUFNRyxVQUFVLEdBQUdSLEtBQUssQ0FBQ1MsU0FBTixDQUFnQmIsV0FBVyxDQUFDYyxNQUE1QixFQUFvQ0gsT0FBcEMsQ0FBbkI7QUFDQSxRQUFNSSxVQUFVLEdBQUdILFVBQVUsQ0FBQ0ksT0FBWCxDQUFtQixjQUFuQixFQUFtQ2QsUUFBbkMsQ0FBbkI7QUFFQSxXQUFPTSxHQUFHLENBQUNSLFdBQVcsR0FBR1ksVUFBZCxHQUEyQlgsU0FBNUIsQ0FBSCxDQUEwQztBQUMvQ2dCLE1BQUFBLElBQUksRUFBRSxVQUR5QztBQUUvQ2IsTUFBQUEsS0FBSyxFQUFFVyxVQUZ3QztBQUcvQ0csTUFBQUEsSUFBSSxFQUFFO0FBQUNILFFBQUFBLFVBQVUsRUFBVkE7QUFBRDtBQUh5QyxLQUExQyxDQUFQO0FBS0Q7O0FBQ0RSLEVBQUFBLGVBQWUsQ0FBQ0osT0FBaEIsR0FBMEJBLE9BQTFCO0FBRUEsTUFBTWdCLE1BQU0sR0FBRyxLQUFLQSxNQUFwQixDQXhCNEUsQ0EwQjVFOztBQUNBLE1BQU1DLGdCQUFnQixHQUFHRCxNQUFNLENBQUNFLFNBQVAsQ0FBaUJELGdCQUExQztBQUNBLE1BQU1FLGFBQWEsR0FBR0gsTUFBTSxDQUFDRSxTQUFQLENBQWlCQyxhQUF2QztBQUNBRixFQUFBQSxnQkFBZ0IsQ0FBQ0csUUFBakIsR0FBNEJoQixlQUE1QjtBQUNBZSxFQUFBQSxhQUFhLENBQUNFLE1BQWQsQ0FBcUJGLGFBQWEsQ0FBQ2hCLE9BQWQsQ0FBc0IsTUFBdEIsQ0FBckIsRUFBb0QsQ0FBcEQsRUFBdUQsVUFBdkQ7QUFFQSxNQUFNbUIsUUFBUSxHQUFHLEtBQUtBLFFBQXRCOztBQUNBLE1BQUlBLFFBQUosRUFBYztBQUNaLFFBQU1DLFFBQVEsR0FBR0QsUUFBUSxDQUFDSixTQUFULENBQW1CSyxRQUFwQztBQUNBLFFBQUksQ0FBQ0EsUUFBTCxFQUFlOztBQUNmQSxJQUFBQSxRQUFRLENBQUNILFFBQVQsR0FBb0IsVUFBQUksSUFBSSxFQUFJO0FBQzFCLGFBQU9BLElBQUksQ0FBQ1QsSUFBTCxDQUFVSCxVQUFqQjtBQUNELEtBRkQ7QUFHRDtBQUNGOztBQUVEYSxNQUFNLENBQUNDLE9BQVAsR0FBaUI5QixNQUFqQiIsInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIHBsdWdpbiAoe2JlZ2luTWFya2VyID0gJy9+JywgZW5kTWFya2VyID0gJ34vJywgcmVwbGFjZXIgPSAn4paIJ30gPSB7fSkge1xuICBmdW5jdGlvbiBsb2NhdG9yICh2YWx1ZSwgZnJvbUluZGV4KSB7XG4gICAgcmV0dXJuIHZhbHVlLmluZGV4T2YoYmVnaW5NYXJrZXIsIGZyb21JbmRleCk7XG4gIH1cblxuICBmdW5jdGlvbiBpbmxpbmVUb2tlbml6ZXIgKGVhdCwgdmFsdWUsIHNpbGVudCkge1xuICAgIGNvbnN0IGtlZXBCZWdpbiA9IHZhbHVlLmluZGV4T2YoYmVnaW5NYXJrZXIpO1xuICAgIGNvbnN0IGtlZXBFbmQgPSB2YWx1ZS5pbmRleE9mKGVuZE1hcmtlcik7XG4gICAgaWYgKGtlZXBCZWdpbiAhPT0gMCB8fCBrZWVwRW5kID09PSAtMSkgcmV0dXJuO1xuXG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmIC0gbmV2ZXIgdXNlZCAoeWV0KSAqL1xuICAgIGlmIChzaWxlbnQpIHJldHVybiB0cnVlO1xuXG4gICAgY29uc3QgdG9CbGFja291dCA9IHZhbHVlLnN1YnN0cmluZyhiZWdpbk1hcmtlci5sZW5ndGgsIGtlZXBFbmQpO1xuICAgIGNvbnN0IGJsYWNrZWRPdXQgPSB0b0JsYWNrb3V0LnJlcGxhY2UoL1swLTlhLXpBLVpdL2csIHJlcGxhY2VyKTtcblxuICAgIHJldHVybiBlYXQoYmVnaW5NYXJrZXIgKyB0b0JsYWNrb3V0ICsgZW5kTWFya2VyKSh7XG4gICAgICB0eXBlOiAncmVkYWN0ZWQnLFxuICAgICAgdmFsdWU6IGJsYWNrZWRPdXQsXG4gICAgICBkYXRhOiB7YmxhY2tlZE91dH0sXG4gICAgfSk7XG4gIH1cbiAgaW5saW5lVG9rZW5pemVyLmxvY2F0b3IgPSBsb2NhdG9yO1xuXG4gIGNvbnN0IFBhcnNlciA9IHRoaXMuUGFyc2VyO1xuXG4gIC8vIEluamVjdCBpbmxpbmVUb2tlbml6ZXJcbiAgY29uc3QgaW5saW5lVG9rZW5pemVycyA9IFBhcnNlci5wcm90b3R5cGUuaW5saW5lVG9rZW5pemVycztcbiAgY29uc3QgaW5saW5lTWV0aG9kcyA9IFBhcnNlci5wcm90b3R5cGUuaW5saW5lTWV0aG9kcztcbiAgaW5saW5lVG9rZW5pemVycy5yZWRhY3RlZCA9IGlubGluZVRva2VuaXplcjtcbiAgaW5saW5lTWV0aG9kcy5zcGxpY2UoaW5saW5lTWV0aG9kcy5pbmRleE9mKCd0ZXh0JyksIDAsICdyZWRhY3RlZCcpO1xuXG4gIGNvbnN0IENvbXBpbGVyID0gdGhpcy5Db21waWxlcjtcbiAgaWYgKENvbXBpbGVyKSB7XG4gICAgY29uc3QgdmlzaXRvcnMgPSBDb21waWxlci5wcm90b3R5cGUudmlzaXRvcnM7XG4gICAgaWYgKCF2aXNpdG9ycykgcmV0dXJuO1xuICAgIHZpc2l0b3JzLnJlZGFjdGVkID0gbm9kZSA9PiB7XG4gICAgICByZXR1cm4gbm9kZS5kYXRhLmJsYWNrZWRPdXQ7XG4gICAgfTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHBsdWdpbjtcbiJdfQ==